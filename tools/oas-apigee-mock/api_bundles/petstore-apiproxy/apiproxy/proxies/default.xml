<?xml version="1.0"?>
<ProxyEndpoint name="default">
  <Description>Swagger Petstore - OpenAPI 3.0</Description>
  <PreFlow name="PreFlow">
    <Request>
      <Step>
        <Name>oas-request-validation</Name>
        <Condition>request.verb != "OPTIONS"</Condition>
      </Step>
    </Request>
    <Response/>
  </PreFlow>
  <FaultRules>
    <FaultRule name="OAS Request Validation Fault">
      <Step>
        <Name>am-bad-request-400</Name>
        <Condition>OASValidation.oas-request-validation.failed = "true"</Condition>
      </Step>
    </FaultRule>
  </FaultRules>
  <Flows>
    <Flow name="updatePet">
      <Condition>(proxy.pathsuffix MatchesPath &quot;/pet&quot;) and (request.verb = &quot;PUT&quot;)</Condition>
      <Description>Update an existing pet</Description>
      <Response>
        <Step>
          <Name>am-updatepet-200</Name>
        </Step>
      </Response>
    </Flow>
    <Flow name="addPet">
      <Condition>(proxy.pathsuffix MatchesPath &quot;/pet&quot;) and (request.verb = &quot;POST&quot;)</Condition>
      <Description>Add a new pet to the store</Description>
      <Response>
        <Step>
          <Name>am-addpet-200</Name>
        </Step>
      </Response>
    </Flow>
    <Flow name="findPetsByStatus">
      <Condition>(proxy.pathsuffix MatchesPath &quot;/pet/findByStatus&quot;) and (request.verb = &quot;GET&quot;)</Condition>
      <Description>Finds Pets by status</Description>
      <Response>
        <Step>
          <Name>am-findpetsbystatus-200</Name>
        </Step>
      </Response>
    </Flow>
    <Flow name="findPetsByTags">
      <Condition>(proxy.pathsuffix MatchesPath &quot;/pet/findByTags&quot;) and (request.verb = &quot;GET&quot;)</Condition>
      <Description>Finds Pets by tags</Description>
      <Response>
        <Step>
          <Name>am-findpetsbytags-200</Name>
        </Step>
      </Response>
    </Flow>
    <Flow name="getPetById">
      <Condition>(proxy.pathsuffix MatchesPath &quot;/pet/{petId}&quot;) and (request.verb = &quot;GET&quot;)</Condition>
      <Description>Find pet by ID</Description>
      <Response>
        <Step>
          <Name>am-getpetbyid-200</Name>
        </Step>
      </Response>
    </Flow>
    <Flow name="updatePetWithForm">
      <Condition>(proxy.pathsuffix MatchesPath &quot;/pet/{petId}&quot;) and (request.verb = &quot;POST&quot;)</Condition>
      <Description>Updates a pet in the store with form data</Description>
      <Response>
        <Step>
          <Name>am-updatepetwithform-405</Name>
        </Step>
      </Response>
    </Flow>
    <Flow name="deletePet">
      <Condition>(proxy.pathsuffix MatchesPath &quot;/pet/{petId}&quot;) and (request.verb = &quot;DELETE&quot;)</Condition>
      <Description>Deletes a pet</Description>
      <Response>
        <Step>
          <Name>am-deletepet-400</Name>
        </Step>
      </Response>
    </Flow>
    <Flow name="uploadFile">
      <Condition>(proxy.pathsuffix MatchesPath &quot;/pet/{petId}/uploadImage&quot;) and (request.verb = &quot;POST&quot;)</Condition>
      <Description>uploads an image</Description>
      <Response>
        <Step>
          <Name>am-uploadfile-200</Name>
        </Step>
      </Response>
    </Flow>
    <Flow name="getInventory">
      <Condition>(proxy.pathsuffix MatchesPath &quot;/store/inventory&quot;) and (request.verb = &quot;GET&quot;)</Condition>
      <Description>Returns pet inventories by status</Description>
      <Response>
        <Step>
          <Name>am-getinventory-200</Name>
        </Step>
      </Response>
    </Flow>
    <Flow name="placeOrder">
      <Condition>(proxy.pathsuffix MatchesPath &quot;/store/order&quot;) and (request.verb = &quot;POST&quot;)</Condition>
      <Description>Place an order for a pet</Description>
      <Response>
        <Step>
          <Name>am-placeorder-200</Name>
        </Step>
      </Response>
    </Flow>
    <Flow name="getOrderById">
      <Condition>(proxy.pathsuffix MatchesPath &quot;/store/order/{orderId}&quot;) and (request.verb = &quot;GET&quot;)</Condition>
      <Description>Find purchase order by ID</Description>
      <Response>
        <Step>
          <Name>am-getorderbyid-200</Name>
        </Step>
      </Response>
    </Flow>
    <Flow name="deleteOrder">
      <Condition>(proxy.pathsuffix MatchesPath &quot;/store/order/{orderId}&quot;) and (request.verb = &quot;DELETE&quot;)</Condition>
      <Description>Delete purchase order by ID</Description>
      <Response>
        <Step>
          <Name>am-deleteorder-400</Name>
        </Step>
      </Response>
    </Flow>
    <Flow name="createUser">
      <Condition>(proxy.pathsuffix MatchesPath &quot;/user&quot;) and (request.verb = &quot;POST&quot;)</Condition>
      <Description>Create user</Description>
      <Response>
        <Step>
          <Name>am-createuser-default</Name>
        </Step>
      </Response>
    </Flow>
    <Flow name="createUsersWithListInput">
      <Condition>(proxy.pathsuffix MatchesPath &quot;/user/createWithList&quot;) and (request.verb = &quot;POST&quot;)</Condition>
      <Description>Creates list of users with given input array</Description>
      <Response>
        <Step>
          <Name>am-createuserswithlistinput-200</Name>
        </Step>
      </Response>
    </Flow>
    <Flow name="loginUser">
      <Condition>(proxy.pathsuffix MatchesPath &quot;/user/login&quot;) and (request.verb = &quot;GET&quot;)</Condition>
      <Description>Logs user into the system</Description>
      <Response>
        <Step>
          <Name>am-loginuser-200</Name>
        </Step>
      </Response>
    </Flow>
    <Flow name="logoutUser">
      <Condition>(proxy.pathsuffix MatchesPath &quot;/user/logout&quot;) and (request.verb = &quot;GET&quot;)</Condition>
      <Description>Logs out current logged in user session</Description>
      <Response>
        <Step>
          <Name>am-logoutuser-default</Name>
        </Step>
      </Response>
    </Flow>
    <Flow name="getUserByName">
      <Condition>(proxy.pathsuffix MatchesPath &quot;/user/{username}&quot;) and (request.verb = &quot;GET&quot;)</Condition>
      <Description>Get user by user name</Description>
      <Response>
        <Step>
          <Name>am-getuserbyname-200</Name>
        </Step>
      </Response>
    </Flow>
    <Flow name="updateUser">
      <Condition>(proxy.pathsuffix MatchesPath &quot;/user/{username}&quot;) and (request.verb = &quot;PUT&quot;)</Condition>
      <Description>Update user</Description>
      <Response>
        <Step>
          <Name>am-updateuser-default</Name>
        </Step>
      </Response>
    </Flow>
    <Flow name="deleteUser">
      <Condition>(proxy.pathsuffix MatchesPath &quot;/user/{username}&quot;) and (request.verb = &quot;DELETE&quot;)</Condition>
      <Description>Delete user</Description>
      <Response>
        <Step>
          <Name>am-deleteuser-400</Name>
        </Step>
      </Response>
    </Flow>
  </Flows>
  <HTTPProxyConnection>
    <BasePath>/api/v3</BasePath>
    <VirtualHost>secure</VirtualHost>
  </HTTPProxyConnection>
  <RouteRule name="noroute"/>
</ProxyEndpoint>